* T-Diagram Make

A tool for deciding the build order of chained compilers and cross compilers.

** T-Diagrams

A T-Diagram is a mental tool for keeping track of how [a set of
compiler tools are
built](https://www.youtube.com/watch?v=PjeE8Bc96HY).  This is
particularly useful when working on cross compilers or building up the
base tool for a new system.

If you have an assembler written in machine code.
#+BEGIN_SRC
            +-----------------------------+
Assembler = | Assembly            Binary  |
            +---------+          +--------+
                      |  Binary  |
                      +----------+
#+END_SRC

And a compiler to assembly written in assembly.
#+BEGIN_SRC
           +------------------------------+
Compiler = | Language            Assembly |
           +---------+          +---------+
                     | Assembly |
                     +----------+
#+END_SRC

One can put the Compiler though the Assembler to obtain a compiler
that is executable on your system.
#+BEGIN_SRC
            +------------------------------+                        +------------------------------+
Compiler2 = | Language            Assembly |                      = | Language            Assembly |
            +---------+          +---------+--------------------+   +---------+          +---------+
                      | Assembly | Assembly             Binary  |             |  Binary  |
                      +----------+---------+          +---------+             +----------+
                                           |  Binary  |
                                           +----------+
#+END_SRC


** Future Work

1) Currently an optimizer isn't expressible in the TDig class.
#+BEGIN_SRC
            +--------------------------------------+
Optimizer = | Intermediate  Quality   Intermediate |
            +-------------+          +-------------+
                          |  Binary  |
                          +----------+
#+END_SRC

2) Support for interpreters.
#+BEGIN_SRC
              +------------------------+
Interpreter = |   Language             |
              +-------------+          +
                            |  Binary  |
                            +----------+
#+END_SRC

An interpreter is a tool that can be used to build intermediate tools but not final tools.
For example:
#+BEGIN_SRC
            +------------------------------+              +------------------------------+
Compiler2 = | Language            Assembly |            = | Language            Assembly |
            +---------+          +---------+----------+   +---------+          +---------+
                      | Assembly | Assembly           |             |  Binary  |
                      +----------+---------+          |             +----------+
                                           |  Binary  |
                                           +----------+
#+END_SRC

This ~Compiler2~ is usable for building other tools but is not providable as an output.

3) Support for naming programs, i.e. a seperate file that lists the T Diageam type of each program.

4) If a directory is untyped look for a file inside with the same base name as use it's type.

5) Write an intelligent solver. Rather than the trivial one and the brute force ones that currently exist.

This should probably be done by calling out of C++ into a language that is better for that.

6) Support for linking.

The linking of several object files into a single binary is an important step for the tool to understand.
The rule for the C++ linker must be able to require some flags are all or nothing for its inputs, as that is required for sensible compilation.

7) Make or borrow a rule base.

I believe GNU-Make has a large rule-base for how to compile different types of files, try to leverage that existing knowledge.

8) Automatic structure detection.

In C, C++, and many other languages, code files specify which other files they depend on.
Automatic detection of this structure will reduce the amount of configuration required by the user.
